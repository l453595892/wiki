// Code generated by protoc-gen-go. DO NOT EDIT.
// source: templete.proto

package template

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type TemplateRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TemplateRequest) Reset()         { *m = TemplateRequest{} }
func (m *TemplateRequest) String() string { return proto.CompactTextString(m) }
func (*TemplateRequest) ProtoMessage()    {}
func (*TemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a0ccbbff1fbfb1, []int{0}
}

func (m *TemplateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemplateRequest.Unmarshal(m, b)
}
func (m *TemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemplateRequest.Marshal(b, m, deterministic)
}
func (m *TemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemplateRequest.Merge(m, src)
}
func (m *TemplateRequest) XXX_Size() int {
	return xxx_messageInfo_TemplateRequest.Size(m)
}
func (m *TemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TemplateRequest proto.InternalMessageInfo

func (m *TemplateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type TemplateResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TemplateResponse) Reset()         { *m = TemplateResponse{} }
func (m *TemplateResponse) String() string { return proto.CompactTextString(m) }
func (*TemplateResponse) ProtoMessage()    {}
func (*TemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_97a0ccbbff1fbfb1, []int{1}
}

func (m *TemplateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemplateResponse.Unmarshal(m, b)
}
func (m *TemplateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemplateResponse.Marshal(b, m, deterministic)
}
func (m *TemplateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemplateResponse.Merge(m, src)
}
func (m *TemplateResponse) XXX_Size() int {
	return xxx_messageInfo_TemplateResponse.Size(m)
}
func (m *TemplateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TemplateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TemplateResponse proto.InternalMessageInfo

func (m *TemplateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*TemplateRequest)(nil), "template.TemplateRequest")
	proto.RegisterType((*TemplateResponse)(nil), "template.TemplateResponse")
}

func init() { proto.RegisterFile("templete.proto", fileDescriptor_97a0ccbbff1fbfb1) }

var fileDescriptor_97a0ccbbff1fbfb1 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x49, 0xcd, 0x2d,
	0xc8, 0x49, 0x2d, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0xf3, 0x13, 0x4b,
	0x52, 0xa5, 0x64, 0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3,
	0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0xea, 0x94, 0x54, 0xb9, 0xf8, 0x43,
	0xa0, 0x2a, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73,
	0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x1d, 0x2e, 0x01, 0x84, 0xb2,
	0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0x74,
	0x98, 0x52, 0x18, 0xd7, 0x68, 0x1d, 0x23, 0x17, 0xbb, 0x7b, 0x51, 0x6a, 0x6a, 0x49, 0x6a, 0x91,
	0x90, 0x1f, 0x17, 0x7b, 0x70, 0x6a, 0x5e, 0x8a, 0x7b, 0x6a, 0x89, 0x90, 0xa4, 0x1e, 0xcc, 0x51,
	0x7a, 0x68, 0x76, 0x4a, 0x49, 0x61, 0x93, 0x82, 0xd8, 0xa3, 0xc4, 0xd3, 0x74, 0xf9, 0xc9, 0x64,
	0x26, 0x36, 0x21, 0x16, 0xfd, 0xf4, 0xd4, 0x12, 0xa1, 0x60, 0x2e, 0x0e, 0x90, 0x79, 0x01, 0xf9,
	0xc5, 0x64, 0x1b, 0x28, 0x00, 0x36, 0x90, 0x4b, 0x89, 0x55, 0xbf, 0x20, 0xbf, 0xb8, 0xc4, 0x8a,
	0x51, 0x2b, 0x89, 0x0d, 0x1c, 0x18, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0xef, 0x2e,
	0xec, 0x46, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SendGet(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error)
	SendPost(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SendGet(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error) {
	out := new(TemplateResponse)
	err := c.cc.Invoke(ctx, "/template.Greeter/SendGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SendPost(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error) {
	out := new(TemplateResponse)
	err := c.cc.Invoke(ctx, "/template.Greeter/SendPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	// Sends a greeting
	SendGet(context.Context, *TemplateRequest) (*TemplateResponse, error)
	SendPost(context.Context, *TemplateRequest) (*TemplateResponse, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SendGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SendGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.Greeter/SendGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SendGet(ctx, req.(*TemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SendPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SendPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.Greeter/SendPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SendPost(ctx, req.(*TemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "template.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendGet",
			Handler:    _Greeter_SendGet_Handler,
		},
		{
			MethodName: "SendPost",
			Handler:    _Greeter_SendPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "templete.proto",
}
